<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add...</value>
  </data>
  <data name="AddExistingLicenseHeaderFileQuestion" xml:space="preserve">
    <value>Do you want to Add Existing License Header Definition File?</value>
  </data>
  <data name="After" xml:space="preserve">
    <value>After</value>
  </data>
  <data name="AfterCommand" xml:space="preserve">
    <value>After selected command</value>
  </data>
  <data name="Before" xml:space="preserve">
    <value>Before</value>
  </data>
  <data name="BeforeCommand" xml:space="preserve">
    <value>Before selected command</value>
  </data>
  <data name="Begin" xml:space="preserve">
    <value>Begin</value>
  </data>
  <data name="BeginComment" xml:space="preserve">
    <value>Begin comment</value>
  </data>
  <data name="BeginRegion" xml:space="preserve">
    <value>Begin region</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit...</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="EndComment" xml:space="preserve">
    <value>End comment</value>
  </data>
  <data name="EndRegion" xml:space="preserve">
    <value>End region</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Error_CreatingFile" xml:space="preserve">
    <value>The file could not be created.</value>
  </data>
  <data name="Error_InvalidLicenseHeader" xml:space="preserve">
    <value>An error occured while parsing the file {0}.\nMake sure the comment syntax is correct.</value>
  </data>
  <data name="Error_LanguageInvalid" xml:space="preserve">
    <value>Please provide at least an extension and either a line comment or begin and end comment tags.</value>
  </data>
  <data name="Error_LanguageNotFound" xml:space="preserve">
    <value>No comment definitions found for {0} files.\nDo you want to add them to the configuration?</value>
  </data>
  <data name="Error_MultipleProjectsNoLicenseHeaderFile" xml:space="preserve">
    <value>No license header definition file found in following projects:\n\n{0}\n\nDo you want to add an existing License Header Definition File into these Projects?</value>
  </data>
  <data name="Error_NoHeaderDefinition" xml:space="preserve">
    <value>No license header definition file found in project {0}.\nDo you want to add a new License Header Definition File?</value>
  </data>
  <data name="Error_NoHeaderFound" xml:space="preserve">
    <value>This extension currently has no header defined in the license header definition file\n </value>
  </data>
  <data name="Error_NoLicenseHeaderFile" xml:space="preserve">
    <value>The project has no license header file.</value>
  </data>
  <data name="Execute" xml:space="preserve">
    <value>Execute 'Add license header' command</value>
  </data>
  <data name="Extension" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Extensions" xml:space="preserve">
    <value>Extensions</value>
  </data>
  <data name="FileHeaderTextEditButton" xml:space="preserve">
    <value>Edit...</value>
  </data>
  <data name="FileHeaderTextLabel" xml:space="preserve">
    <value>Text for new license header definitions</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Information_NoDefinitionFileStopUpdating" xml:space="preserve">
    <value>Cannot add License Headers because there is no License Header Definition File. Please add one and try again.</value>
  </data>
  <data name="InsertInNewFiles" xml:space="preserve">
    <value>Automatically insert license headers in new files</value>
  </data>
  <data name="LicenseHeaderManagerName" xml:space="preserve">
    <value>License Header Manager</value>
  </data>
  <data name="Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="LineComment" xml:space="preserve">
    <value>Line Comment</value>
  </data>
  <data name="LinkedCommands" xml:space="preserve">
    <value>You can link the 'Add license header' command to other commands so that it is automatically executed before or after them.</value>
  </data>
  <data name="LinkedFileUpdateInformation" xml:space="preserve">
    <value>We could not update following linked files, because there is no license header definition file in their original project, or the original project is not part of this solution.\n\n{0}</value>
  </data>
  <data name="NameOfThisExtension" xml:space="preserve">
    <value>License Header Manager</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Question_AddExistingDefinitionFileToProject" xml:space="preserve">
    <value>No License Header Definition File found in the Project. Do you want to add an existing License Header Definition File to the project?</value>
  </data>
  <data name="Question_AddNewLicenseHeaderDefinitionFileMultipleProjects" xml:space="preserve">
    <value>It seems like you have no project with an License Header Definition File added. Do you want to add the Default License Header File into all projects?</value>
  </data>
  <data name="Question_AddNewLicenseHeaderDefinitionFileSingleProject" xml:space="preserve">
    <value>No License Header Definition File found in your Solution. Do you want to add a new one?</value>
  </data>
  <data name="Question_StopForConfiguringDefinitionFilesMultipleFiles" xml:space="preserve">
    <value>License Header Definition Files added. Do you want to stop the update process to configure them?</value>
  </data>
  <data name="Question_StopForConfiguringDefinitionFilesSingleFile" xml:space="preserve">
    <value>License Header Definition File added. Do you want to stop the update process to configure it?</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RequiredKeywordsTooltip" xml:space="preserve">
    <value>A comma-delimited list of valid keywords.</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search:</value>
  </data>
  <data name="SkipExpression" xml:space="preserve">
    <value>Skip expression</value>
  </data>
  <data name="SkipExpressionHelp" xml:space="preserve">
    <value>Some languages require special instructions at the very beginning of the file.\nXML-based languages need the &lt;?xml ... ?&gt; declaration for example. You can\ndefine a regular expression that identifies these instructions here so that the\nlicense header comment can be inserted after them, leaving the file valid.\n\nSee the online documentation on http://licensemanager.codeplex.com/\nfor more detailed information.</value>
  </data>
  <data name="UpdateSolution" xml:space="preserve">
    <value>Updating Project {0}/{1}</value>
  </data>
  <data name="Update_1_1_3" xml:space="preserve">
    <value>License Header Manager has automatically updated its configuration to add SkipExpressions.\n\nPlease check your language settings if they were modified\nbefore the update.\n\nIf you added any XML-based languages, you might need to add\na SkipExpression.</value>
  </data>
  <data name="Update_1_3_1" xml:space="preserve">
    <value>License Header Manager has automatically updated its configuration to add .config and .xsd.\n\nPlease check your language settings if they were modified\nbefore the update.</value>
  </data>
  <data name="Update_DefaultLicenseHeader_1_2_1" xml:space="preserve">
    <value>License Header Manager has automatically updated its configuration\nto include settings for the default license header definition file.</value>
  </data>
  <data name="Update_RegionSettings_1_2_1" xml:space="preserve">
    <value>License Header Manager has automatically updated its configuration\nto fix the settings for C# and VB.NET regions.\n\nPlease check your language settings if they were modified\nbefore the update.</value>
  </data>
  <data name="Update_SkipExpressions_1_2_2" xml:space="preserve">
    <value>License Header Manager has automatically updated its configuration\nto fix a problem with the SkipExpressions for XML, HTML (and similar), and JS files.\n\nPlease check your language settings if they were modified\nbefore the update.</value>
  </data>
  <data name="UpdatingFiles" xml:space="preserve">
    <value>Updating files...</value>
  </data>
  <data name="UseRequiredKeywords" xml:space="preserve">
    <value>Replace license header if it contains one of the following keywords</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="Warning_CantLinkItemInSameProject" xml:space="preserve">
    <value>The selected license header definition file already exists in this project. It is not possible to add a link to an item that already exists in the project.</value>
  </data>
  <data name="Warning_InvalidLicenseHeader" xml:space="preserve">
    <value>The header definition for {0} files contains non-comment text.\nIf you insert this header, you will not be able to remove or replace the header automatically!\nDo you really want to add this header to the file?</value>
  </data>
  <data name="WpfDefaultLicenseHeaderDialogTitle" xml:space="preserve">
    <value>Edit default header definition</value>
  </data>
  <data name="WpfLanguageDialogTitle" xml:space="preserve">
    <value>Edit language</value>
  </data>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Constant_MaxNumberOfProjectItemsWhereOpeningDefinitionFilesInEditor" type="System.Int32, mscorlib">
    <value>10</value>
  </data>
  <data name="Constant_DisplayNameLookup_TimeDifferenceInSecondsBeforeTooOld" type="System.Int32, mscorlib">
    <value>5</value>
  </data>
  <data name="UserInfo_LookupFailure_Information" xml:space="preserve">
    <value>Exception caught while trying to lookup the display name with 'UserPrincipal.Current.DisplayName'. \nStacktrace: {0}
</value>
  </data>
  <data name="UserInfo_UnknownDisplayNameString" xml:space="preserve">
    <value>&lt;Unknown&gt;</value>
  </data>
  <data name="Constant_MaxProjectsWithoutDefinitionFileShownInMessage" type="System.Int32, mscorlib">
    <value>5</value>
  </data>
  <data name="UserInfo_LookupFailure_FileNotFoundException_Information" xml:space="preserve">
    <value>FileNotFoundException caught while trying to lookup the display name with 'UserPrincipal.Current.DisplayName'. \nThis is likely caused by an Windows 10 update and can be fixed by updating the registry. \nSee https://git.io/vza4O for more information.</value>
  </data>
  <data name="UseBlacklistedKeywords" xml:space="preserve">
    <value>Unless it contains one of the following blacklisted items</value>
  </data>
  <data name="BlacklistedKeywordsTooltip" xml:space="preserve">
    <value>A comma-delimited list of blacklisted keywords.</value>
  </data>
</root>